/// <reference types="@types/jasmine" />

/* tslint:disable:no-magic-numbers */
/* tslint:disable:max-line-length */

import { mergeSort } from "../../../problems/merge-sort";

const singleTest: number[] = [1];
const singleTestExpected: number[] = [1];

const simpleTest: number[] = [3, 5, 1, 4, 2];
const simpleTestExpected: number[] = [1, 2, 3, 4, 5];

const complexTest: number[] = [505, 522, 721, 953, 536, 872, 467, 533, 119, 382, 495, 55, 116, 811, 756, 966, 832, 86, 175, 617, 247, 908, 69, 238, 85, 91, 218, 751, 575, 380, 179, 803, 405, 377, 89, 632, 701, 890, 745, 702, 805, 875, 719, 823, 969, 68, 315, 919, 242, 837, 612, 26, 21, 929, 440, 322, 606, 703, 397, 525, 337, 943, 788, 92, 544, 952, 852, 332, 552, 828, 814, 948, 31, 466, 99, 573, 304, 656, 122, 754, 638, 705, 164, 297, 176, 711, 32, 447, 187, 301, 567, 14, 696, 695, 359, 45, 73, 210, 795, 443, 737, 767, 740, 333, 296, 454, 348, 448, 694, 336, 674, 111, 556, 636, 47, 659, 344, 713, 933, 572, 4, 456, 390, 254, 217, 531, 913, 749, 196, 42, 836, 859, 429, 601, 883, 775, 381, 923, 895, 129, 918, 347, 488, 257, 396, 583, 940, 101, 289, 148, 290, 637, 622, 415, 914, 598, 458, 43, 445, 864, 453, 192, 224, 857, 0, 147, 936, 125, 715, 75, 326, 593, 730, 506, 170, 321, 143, 37, 729, 654, 372, 144, 137, 647, 787, 699, 260, 469, 369, 971, 630, 651, 760, 738, 243, 29, 476, 220, 599, 182, 992, 246, 596, 789, 689, 446, 512, 278, 325, 627, 662, 272, 807, 314, 345, 312, 718, 540, 868, 603, 177, 215, 798, 300, 214, 98, 473, 199, 658, 486, 173, 50, 252, 328, 873, 518, 84, 391, 559, 481, 259, 419, 340, 110, 156, 394, 672, 263, 205, 642, 882, 323, 97, 128, 607, 392, 644, 477, 903, 571, 244, 167, 528, 27, 493, 776, 921, 967, 76, 849, 293, 785, 783, 586, 597, 100, 949, 841, 581, 275, 363, 184, 539, 946, 628, 366, 20, 553, 810, 190, 276, 83, 384, 487, 104, 320, 426, 142, 693, 6, 88, 385, 502, 510, 181, 818, 724, 786, 578, 283, 1, 574, 747, 38, 11, 357, 634, 108, 840, 375, 77, 225, 475, 541, 212, 106, 152, 682, 905, 193, 829, 769, 706, 824, 683, 124, 207, 680, 944, 986, 820, 925, 15, 441, 725, 61, 708, 44, 12, 461, 523, 970, 273, 624, 649, 281, 716, 863, 843, 977, 166, 109, 227, 516, 130, 878, 262, 643, 600, 367, 33, 412, 900, 791, 226, 64, 120, 520, 483, 501, 975, 831, 112, 874, 478, 515, 893, 222, 198, 834, 564, 611, 513, 294, 858, 994, 49, 58, 796, 686, 370, 274, 507, 195, 569, 339, 65, 657, 881, 113, 39, 954, 906, 267, 25, 114, 920, 422, 411, 228, 46, 74, 240, 591, 667, 186, 996, 546, 424, 577, 432, 159, 744, 34, 211, 331, 280, 355, 801, 206, 792, 437, 162, 19, 365, 490, 704, 731, 846, 813, 922, 118, 870, 584, 492, 140, 723, 362, 717, 35, 107, 963, 898, 862, 374, 902, 452, 726, 484, 535, 234, 90, 239, 621, 928, 871, 131, 241, 743, 815, 763, 249, 399, 826, 568, 503, 438, 675, 517, 460, 229, 937, 251, 376, 151, 978, 932, 231, 955, 302, 420, 17, 886, 652, 146, 685, 709, 53, 463, 96, 361, 960, 951, 855, 433, 178, 449, 139, 912, 387, 770, 56, 670, 66, 511, 378, 279, 604, 393, 368, 619, 313, 655, 219, 216, 508, 171, 545, 927, 851, 793, 910, 123, 587, 688, 16, 527, 958, 885, 287, 504, 284, 417, 93, 364, 762, 472, 160, 141, 640, 981, 782, 191, 848, 413, 150, 588, 570, 70, 204, 134, 153, 780, 727, 2, 987, 468, 165, 947, 916, 720, 62, 821, 915, 459, 245, 768, 250, 761, 869, 735, 972, 299, 995, 650, 566, 480, 519, 957, 822, 757, 592, 180, 752, 386, 646, 907, 663, 489, 436, 887, 457, 684, 867, 149, 291, 310, 825, 425, 82, 561, 589, 248, 962, 835, 794, 585, 980, 303, 876, 356, 924, 625, 984, 896, 833, 645, 712, 292, 115, 894, 105, 755, 127, 403, 901, 81, 54, 155, 414, 854, 934, 450, 661, 408, 270, 976, 521, 439, 746, 13, 609, 809, 72, 471, 557, 931, 842, 51, 63, 202, 773, 653, 200, 965, 103, 80, 524, 233, 264, 428, 311, 388, 455, 806, 554, 830, 285, 766, 759, 741, 892, 28, 562, 350, 758, 582, 560, 800, 298, 734, 430, 549, 3, 373, 172, 409, 558, 256, 342, 714, 626, 308, 442, 57, 318, 71, 548, 230, 509, 406, 8, 961, 884, 232, 742, 334, 594, 666, 845, 990, 132, 529, 614, 41, 351, 253, 169, 266, 423, 500, 799, 465, 590, 579, 349, 615, 629, 491, 753, 639, 542, 904, 816, 237, 435, 479, 673, 309, 774, 59, 329, 126, 808, 208, 286, 964, 668, 197, 79, 687, 514, 850, 610, 138, 201, 802, 660, 444, 781, 891, 917, 354, 9, 5, 470, 352, 161, 421, 52, 690, 295, 935, 543, 319, 189, 550, 353, 538, 765, 537, 485, 983, 991, 410, 223, 999, 678, 185, 631, 779, 595, 255, 565, 736, 772, 613, 530, 48, 839, 988, 812, 327, 563, 379, 24, 956, 777, 797, 317, 305, 402, 157, 926, 78, 451, 707, 221, 398, 213, 154, 677, 346, 36, 804, 679, 288, 973, 856, 576, 7, 681, 209, 997, 750, 620, 989, 338, 827, 861, 341, 135, 418, 764, 261, 360, 497, 605, 733, 698, 580, 306, 371, 282, 145, 853, 474, 945, 499, 168, 860, 277, 897, 494, 692, 899, 911, 534, 938, 551, 427, 498, 87, 235, 664, 236, 188, 739, 635, 121, 968, 819, 950, 22, 700, 616, 555, 939, 324, 985, 722, 163, 133, 431, 269, 880, 203, 40, 979, 865, 889, 784, 665, 676, 993, 618, 271, 60, 942, 710, 888, 532, 330, 462, 602, 671, 974, 464, 526, 265, 547, 102, 496, 866, 959, 930, 648, 669, 10, 909, 117, 877, 136, 623, 95, 404, 407, 838, 23, 194, 67, 482, 307, 633, 174, 94, 434, 268, 728, 183, 416, 732, 941, 401, 998, 691, 790, 316, 383, 18, 844, 358, 395, 748, 158, 343, 30, 778, 771, 847, 641, 335, 697, 608, 389, 817, 982, 258, 879, 400];
const complexTestExpected: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999];

describe("mergeSort", () => {
    it("Works", () => {
        expect(mergeSort(singleTest)).toEqual(singleTestExpected);
        expect(mergeSort(simpleTest)).toEqual(simpleTestExpected);
        expect(mergeSort(complexTest)).toEqual(complexTestExpected);
    });
});
